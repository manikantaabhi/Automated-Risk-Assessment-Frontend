  import { Component, EventEmitter, Output, Input } from '@angular/core';
  import { CommonModule } from '@angular/common';
  import { MatDialogRef } from '@angular/material/dialog';
  import { FormsModule } from '@angular/forms';
  import { HttpClient, HttpClientModule } from '@angular/common/http';
  import { Router } from '@angular/router';

  @Component({
    selector: 'app-search-popup',
    templateUrl: './vulnerability-popup.component.html',
    styleUrls: ['./vulnerability-popup.component.css'],
    imports: [CommonModule,FormsModule,HttpClientModule]
  })
  export class VulnerabilityPopupComponent {
    
    @Output() searchCompleted = new EventEmitter<boolean>();

    searchData = { make: '', productName: '', version: '' };
    selectedFile: File | null = null;

    constructor(private router:Router,private http:HttpClient,private dialogRef: MatDialogRef<VulnerabilityPopupComponent>) {}

    // Handles file selection
    onFileSelected(event: any) {
      this.selectedFile = event.target.files[0];
    }

    // Handles search logic and emits event
    onSearch() {
      const formData = new FormData();
      formData.append('make', this.searchData.make);
      formData.append('productName', this.searchData.productName);
      formData.append('version', this.searchData.version);
      const apiUrl = 'http://localhost:8080/api/vulnerabilities/check'; // Replace with your API URL

      if (this.selectedFile) {
        formData.append('file', this.selectedFile);
      }

      this.http.post<any>(apiUrl, formData).subscribe(
        (response) => {
        console.log('API Response:', response);
        this.dialogRef.close(response);
        this.router.navigate(['/display-vulnerabilities'], { state: { vulnerabilities: response } });
      },
      (error) => {
        console.error('Error fetching vulnerability data:', error);
      }
      );
    }

    // Close the popup manually
    closeModal() {
      this.dialogRef.close();
    }
  }
