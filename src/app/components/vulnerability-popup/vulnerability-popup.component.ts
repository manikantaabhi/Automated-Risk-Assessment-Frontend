  import { Component, EventEmitter, Output, Input } from '@angular/core';
  import { CommonModule } from '@angular/common';
  import { MatDialogRef } from '@angular/material/dialog';
  import { FormsModule } from '@angular/forms';
  import { HttpClient, HttpClientModule } from '@angular/common/http';
  import { Router } from '@angular/router';
import { LoadingService } from '../../services/loading.service';
import { MatTooltipModule } from '@angular/material/tooltip';

  @Component({
    selector: 'app-search-popup',
    templateUrl: './vulnerability-popup.component.html',
    styleUrls: ['./vulnerability-popup.component.css'],
    imports: [CommonModule,FormsModule,HttpClientModule,MatTooltipModule]
  })
  export class VulnerabilityPopupComponent {
    
    @Output() searchCompleted = new EventEmitter<boolean>();

    searchData = { make: '', productName: '', version: '', keywords: '' };
    selectedFile: File | null = null;

    constructor(private router:Router,private http:HttpClient,private dialogRef: MatDialogRef<VulnerabilityPopupComponent>,private loadingService:LoadingService) {}

    // Handles file selection
    onFileSelected(event: any) {
      this.selectedFile = event.target.files[0];
    }

    // Handles search logic and emits event
    onSearch() {
      this.loadingService.startLoading();
      let formData = new FormData();
      formData.append('make', this.searchData.make);
      formData.append('productName', this.searchData.productName);
      formData.append('version', this.searchData.version);
      formData.append('keywords', this.searchData.keywords);
      const apiUrl = 'http://localhost:8080/api/vulnerabilities/check';
    
      if (this.selectedFile) {
        formData.append('file', this.selectedFile);
      }
    
      this.http.post<any>(apiUrl, formData).subscribe(
        (response) => {
          //console.log("Full API Response:", response);

          this.loadingService.stopLoading();
          // Close dialog and return both vulnerabilities and inputData
          this.dialogRef.close({ vulnerabilities: response, inputData: { ...this.searchData } });
    
          // Navigate with state
          this.router.navigate(['/display-vulnerabilities'], { 
            state: { vulnerabilities: response, inputData: { ...this.searchData } } 
          });
        },
        (error) => {
          this.loadingService.stopLoading();
          console.error('Error fetching vulnerability data:', error);
        }
      );
    }
    

    // Close the popup manually
    closeModal() {
      this.dialogRef.close();
    }
  }
